[
  {
    "ignores": [
      "modules/*",
      "modules_temp/*",
      "docs/modules*.json",
      "result.md"
    ]
  },
  {
    "files": ["**/*.js"],
    "languageOptions": {
      "globals": {
        "AbortController": false,
        "AbortSignal": false,
        "addEventListener": false,
        "alert": false,
        "AnalyserNode": false,
        "Animation": false,
        "AnimationEffectReadOnly": false,
        "AnimationEffectTiming": false,
        "AnimationEffectTimingReadOnly": false,
        "AnimationEvent": false,
        "AnimationPlaybackEvent": false,
        "AnimationTimeline": false,
        "applicationCache": false,
        "ApplicationCache": false,
        "ApplicationCacheErrorEvent": false,
        "atob": false,
        "Attr": false,
        "Audio": false,
        "AudioBuffer": false,
        "AudioBufferSourceNode": false,
        "AudioContext": false,
        "AudioDestinationNode": false,
        "AudioListener": false,
        "AudioNode": false,
        "AudioParam": false,
        "AudioProcessingEvent": false,
        "AudioScheduledSourceNode": false,
        "AudioWorkletGlobalScope": false,
        "AudioWorkletNode": false,
        "AudioWorkletProcessor": false,
        "BarProp": false,
        "BaseAudioContext": false,
        "BatteryManager": false,
        "BeforeUnloadEvent": false,
        "BiquadFilterNode": false,
        "Blob": false,
        "BlobEvent": false,
        "blur": false,
        "BroadcastChannel": false,
        "btoa": false,
        "BudgetService": false,
        "ByteLengthQueuingStrategy": false,
        "Cache": false,
        "caches": false,
        "CacheStorage": false,
        "cancelAnimationFrame": false,
        "cancelIdleCallback": false,
        "CanvasCaptureMediaStreamTrack": false,
        "CanvasGradient": false,
        "CanvasPattern": false,
        "CanvasRenderingContext2D": false,
        "ChannelMergerNode": false,
        "ChannelSplitterNode": false,
        "CharacterData": false,
        "clearInterval": false,
        "clearTimeout": false,
        "clientInformation": false,
        "ClipboardEvent": false,
        "ClipboardItem": false,
        "close": false,
        "closed": false,
        "CloseEvent": false,
        "Comment": false,
        "CompositionEvent": false,
        "CompressionStream": false,
        "confirm": false,
        "console": false,
        "ConstantSourceNode": false,
        "ConvolverNode": false,
        "CountQueuingStrategy": false,
        "createImageBitmap": false,
        "Credential": false,
        "CredentialsContainer": false,
        "crypto": false,
        "Crypto": false,
        "CryptoKey": false,
        "CSS": false,
        "CSSConditionRule": false,
        "CSSFontFaceRule": false,
        "CSSGroupingRule": false,
        "CSSImportRule": false,
        "CSSKeyframeRule": false,
        "CSSKeyframesRule": false,
        "CSSMatrixComponent": false,
        "CSSMediaRule": false,
        "CSSNamespaceRule": false,
        "CSSPageRule": false,
        "CSSPerspective": false,
        "CSSRotate": false,
        "CSSRule": false,
        "CSSRuleList": false,
        "CSSScale": false,
        "CSSSkew": false,
        "CSSSkewX": false,
        "CSSSkewY": false,
        "CSSStyleDeclaration": false,
        "CSSStyleRule": false,
        "CSSStyleSheet": false,
        "CSSSupportsRule": false,
        "CSSTransformValue": false,
        "CSSTranslate": false,
        "CustomElementRegistry": false,
        "customElements": false,
        "CustomEvent": false,
        "DataTransfer": false,
        "DataTransferItem": false,
        "DataTransferItemList": false,
        "DecompressionStream": false,
        "defaultstatus": false,
        "defaultStatus": false,
        "DelayNode": false,
        "DeviceMotionEvent": false,
        "DeviceOrientationEvent": false,
        "devicePixelRatio": false,
        "dispatchEvent": false,
        "document": false,
        "Document": false,
        "DocumentFragment": false,
        "DocumentType": false,
        "DOMError": false,
        "DOMException": false,
        "DOMImplementation": false,
        "DOMMatrix": false,
        "DOMMatrixReadOnly": false,
        "DOMParser": false,
        "DOMPoint": false,
        "DOMPointReadOnly": false,
        "DOMQuad": false,
        "DOMRect": false,
        "DOMRectList": false,
        "DOMRectReadOnly": false,
        "DOMStringList": false,
        "DOMStringMap": false,
        "DOMTokenList": false,
        "DragEvent": false,
        "DynamicsCompressorNode": false,
        "Element": false,
        "ErrorEvent": false,
        "event": false,
        "Event": false,
        "EventSource": false,
        "EventTarget": false,
        "external": false,
        "fetch": false,
        "File": false,
        "FileList": false,
        "FileReader": false,
        "find": false,
        "focus": false,
        "FocusEvent": false,
        "FontFace": false,
        "FontFaceSetLoadEvent": false,
        "FormData": false,
        "FormDataEvent": false,
        "frameElement": false,
        "frames": false,
        "GainNode": false,
        "Gamepad": false,
        "GamepadButton": false,
        "GamepadEvent": false,
        "getComputedStyle": false,
        "getSelection": false,
        "HashChangeEvent": false,
        "Headers": false,
        "history": false,
        "History": false,
        "HTMLAllCollection": false,
        "HTMLAnchorElement": false,
        "HTMLAreaElement": false,
        "HTMLAudioElement": false,
        "HTMLBaseElement": false,
        "HTMLBodyElement": false,
        "HTMLBRElement": false,
        "HTMLButtonElement": false,
        "HTMLCanvasElement": false,
        "HTMLCollection": false,
        "HTMLContentElement": false,
        "HTMLDataElement": false,
        "HTMLDataListElement": false,
        "HTMLDetailsElement": false,
        "HTMLDialogElement": false,
        "HTMLDirectoryElement": false,
        "HTMLDivElement": false,
        "HTMLDListElement": false,
        "HTMLDocument": false,
        "HTMLElement": false,
        "HTMLEmbedElement": false,
        "HTMLFieldSetElement": false,
        "HTMLFontElement": false,
        "HTMLFormControlsCollection": false,
        "HTMLFormElement": false,
        "HTMLFrameElement": false,
        "HTMLFrameSetElement": false,
        "HTMLHeadElement": false,
        "HTMLHeadingElement": false,
        "HTMLHRElement": false,
        "HTMLHtmlElement": false,
        "HTMLIFrameElement": false,
        "HTMLImageElement": false,
        "HTMLInputElement": false,
        "HTMLLabelElement": false,
        "HTMLLegendElement": false,
        "HTMLLIElement": false,
        "HTMLLinkElement": false,
        "HTMLMapElement": false,
        "HTMLMarqueeElement": false,
        "HTMLMediaElement": false,
        "HTMLMenuElement": false,
        "HTMLMetaElement": false,
        "HTMLMeterElement": false,
        "HTMLModElement": false,
        "HTMLObjectElement": false,
        "HTMLOListElement": false,
        "HTMLOptGroupElement": false,
        "HTMLOptionElement": false,
        "HTMLOptionsCollection": false,
        "HTMLOutputElement": false,
        "HTMLParagraphElement": false,
        "HTMLParamElement": false,
        "HTMLPictureElement": false,
        "HTMLPreElement": false,
        "HTMLProgressElement": false,
        "HTMLQuoteElement": false,
        "HTMLScriptElement": false,
        "HTMLSelectElement": false,
        "HTMLShadowElement": false,
        "HTMLSlotElement": false,
        "HTMLSourceElement": false,
        "HTMLSpanElement": false,
        "HTMLStyleElement": false,
        "HTMLTableCaptionElement": false,
        "HTMLTableCellElement": false,
        "HTMLTableColElement": false,
        "HTMLTableElement": false,
        "HTMLTableRowElement": false,
        "HTMLTableSectionElement": false,
        "HTMLTemplateElement": false,
        "HTMLTextAreaElement": false,
        "HTMLTimeElement": false,
        "HTMLTitleElement": false,
        "HTMLTrackElement": false,
        "HTMLUListElement": false,
        "HTMLUnknownElement": false,
        "HTMLVideoElement": false,
        "IDBCursor": false,
        "IDBCursorWithValue": false,
        "IDBDatabase": false,
        "IDBFactory": false,
        "IDBIndex": false,
        "IDBKeyRange": false,
        "IDBObjectStore": false,
        "IDBOpenDBRequest": false,
        "IDBRequest": false,
        "IDBTransaction": false,
        "IDBVersionChangeEvent": false,
        "IdleDeadline": false,
        "IIRFilterNode": false,
        "Image": false,
        "ImageBitmap": false,
        "ImageBitmapRenderingContext": false,
        "ImageCapture": false,
        "ImageData": false,
        "indexedDB": false,
        "innerHeight": false,
        "innerWidth": false,
        "InputEvent": false,
        "IntersectionObserver": false,
        "IntersectionObserverEntry": false,
        "Intl": false,
        "isSecureContext": false,
        "KeyboardEvent": false,
        "KeyframeEffect": false,
        "KeyframeEffectReadOnly": false,
        "length": false,
        "localStorage": false,
        "location": true,
        "Location": false,
        "locationbar": false,
        "matchMedia": false,
        "MediaDeviceInfo": false,
        "MediaDevices": false,
        "MediaElementAudioSourceNode": false,
        "MediaEncryptedEvent": false,
        "MediaError": false,
        "MediaKeyMessageEvent": false,
        "MediaKeySession": false,
        "MediaKeyStatusMap": false,
        "MediaKeySystemAccess": false,
        "MediaList": false,
        "MediaMetadata": false,
        "MediaQueryList": false,
        "MediaQueryListEvent": false,
        "MediaRecorder": false,
        "MediaSettingsRange": false,
        "MediaSource": false,
        "MediaStream": false,
        "MediaStreamAudioDestinationNode": false,
        "MediaStreamAudioSourceNode": false,
        "MediaStreamConstraints": false,
        "MediaStreamEvent": false,
        "MediaStreamTrack": false,
        "MediaStreamTrackEvent": false,
        "menubar": false,
        "MessageChannel": false,
        "MessageEvent": false,
        "MessagePort": false,
        "MIDIAccess": false,
        "MIDIConnectionEvent": false,
        "MIDIInput": false,
        "MIDIInputMap": false,
        "MIDIMessageEvent": false,
        "MIDIOutput": false,
        "MIDIOutputMap": false,
        "MIDIPort": false,
        "MimeType": false,
        "MimeTypeArray": false,
        "MouseEvent": false,
        "moveBy": false,
        "moveTo": false,
        "MutationEvent": false,
        "MutationObserver": false,
        "MutationRecord": false,
        "name": false,
        "NamedNodeMap": false,
        "NavigationPreloadManager": false,
        "navigator": false,
        "Navigator": false,
        "NavigatorUAData": false,
        "NetworkInformation": false,
        "Node": false,
        "NodeFilter": false,
        "NodeIterator": false,
        "NodeList": false,
        "Notification": false,
        "OfflineAudioCompletionEvent": false,
        "OfflineAudioContext": false,
        "offscreenBuffering": false,
        "OffscreenCanvas": true,
        "OffscreenCanvasRenderingContext2D": false,
        "onabort": true,
        "onafterprint": true,
        "onanimationend": true,
        "onanimationiteration": true,
        "onanimationstart": true,
        "onappinstalled": true,
        "onauxclick": true,
        "onbeforeinstallprompt": true,
        "onbeforeprint": true,
        "onbeforeunload": true,
        "onblur": true,
        "oncancel": true,
        "oncanplay": true,
        "oncanplaythrough": true,
        "onchange": true,
        "onclick": true,
        "onclose": true,
        "oncontextmenu": true,
        "oncuechange": true,
        "ondblclick": true,
        "ondevicemotion": true,
        "ondeviceorientation": true,
        "ondeviceorientationabsolute": true,
        "ondrag": true,
        "ondragend": true,
        "ondragenter": true,
        "ondragleave": true,
        "ondragover": true,
        "ondragstart": true,
        "ondrop": true,
        "ondurationchange": true,
        "onemptied": true,
        "onended": true,
        "onerror": true,
        "onfocus": true,
        "ongotpointercapture": true,
        "onhashchange": true,
        "oninput": true,
        "oninvalid": true,
        "onkeydown": true,
        "onkeypress": true,
        "onkeyup": true,
        "onlanguagechange": true,
        "onload": true,
        "onloadeddata": true,
        "onloadedmetadata": true,
        "onloadstart": true,
        "onlostpointercapture": true,
        "onmessage": true,
        "onmessageerror": true,
        "onmousedown": true,
        "onmouseenter": true,
        "onmouseleave": true,
        "onmousemove": true,
        "onmouseout": true,
        "onmouseover": true,
        "onmouseup": true,
        "onmousewheel": true,
        "onoffline": true,
        "ononline": true,
        "onpagehide": true,
        "onpageshow": true,
        "onpause": true,
        "onplay": true,
        "onplaying": true,
        "onpointercancel": true,
        "onpointerdown": true,
        "onpointerenter": true,
        "onpointerleave": true,
        "onpointermove": true,
        "onpointerout": true,
        "onpointerover": true,
        "onpointerup": true,
        "onpopstate": true,
        "onprogress": true,
        "onratechange": true,
        "onrejectionhandled": true,
        "onreset": true,
        "onresize": true,
        "onscroll": true,
        "onsearch": true,
        "onseeked": true,
        "onseeking": true,
        "onselect": true,
        "onstalled": true,
        "onstorage": true,
        "onsubmit": true,
        "onsuspend": true,
        "ontimeupdate": true,
        "ontoggle": true,
        "ontransitionend": true,
        "onunhandledrejection": true,
        "onunload": true,
        "onvolumechange": true,
        "onwaiting": true,
        "onwheel": true,
        "open": false,
        "openDatabase": false,
        "opener": false,
        "Option": false,
        "origin": false,
        "OscillatorNode": false,
        "outerHeight": false,
        "outerWidth": false,
        "OverconstrainedError": false,
        "PageTransitionEvent": false,
        "pageXOffset": false,
        "pageYOffset": false,
        "PannerNode": false,
        "parent": false,
        "Path2D": false,
        "PaymentAddress": false,
        "PaymentRequest": false,
        "PaymentRequestUpdateEvent": false,
        "PaymentResponse": false,
        "performance": false,
        "Performance": false,
        "PerformanceEntry": false,
        "PerformanceLongTaskTiming": false,
        "PerformanceMark": false,
        "PerformanceMeasure": false,
        "PerformanceNavigation": false,
        "PerformanceNavigationTiming": false,
        "PerformanceObserver": false,
        "PerformanceObserverEntryList": false,
        "PerformancePaintTiming": false,
        "PerformanceResourceTiming": false,
        "PerformanceTiming": false,
        "PeriodicWave": false,
        "Permissions": false,
        "PermissionStatus": false,
        "personalbar": false,
        "PhotoCapabilities": false,
        "Plugin": false,
        "PluginArray": false,
        "PointerEvent": false,
        "PopStateEvent": false,
        "postMessage": false,
        "Presentation": false,
        "PresentationAvailability": false,
        "PresentationConnection": false,
        "PresentationConnectionAvailableEvent": false,
        "PresentationConnectionCloseEvent": false,
        "PresentationConnectionList": false,
        "PresentationReceiver": false,
        "PresentationRequest": false,
        "print": false,
        "ProcessingInstruction": false,
        "ProgressEvent": false,
        "PromiseRejectionEvent": false,
        "prompt": false,
        "PushManager": false,
        "PushSubscription": false,
        "PushSubscriptionOptions": false,
        "queueMicrotask": false,
        "RadioNodeList": false,
        "Range": false,
        "ReadableByteStreamController": false,
        "ReadableStream": false,
        "ReadableStreamBYOBReader": false,
        "ReadableStreamBYOBRequest": false,
        "ReadableStreamDefaultController": false,
        "ReadableStreamDefaultReader": false,
        "registerProcessor": false,
        "RemotePlayback": false,
        "removeEventListener": false,
        "reportError": false,
        "Request": false,
        "requestAnimationFrame": false,
        "requestIdleCallback": false,
        "resizeBy": false,
        "ResizeObserver": false,
        "ResizeObserverEntry": false,
        "resizeTo": false,
        "Response": false,
        "RTCCertificate": false,
        "RTCDataChannel": false,
        "RTCDataChannelEvent": false,
        "RTCDtlsTransport": false,
        "RTCIceCandidate": false,
        "RTCIceGatherer": false,
        "RTCIceTransport": false,
        "RTCPeerConnection": false,
        "RTCPeerConnectionIceEvent": false,
        "RTCRtpContributingSource": false,
        "RTCRtpReceiver": false,
        "RTCRtpSender": false,
        "RTCSctpTransport": false,
        "RTCSessionDescription": false,
        "RTCStatsReport": false,
        "RTCTrackEvent": false,
        "screen": false,
        "Screen": false,
        "screenLeft": false,
        "ScreenOrientation": false,
        "screenTop": false,
        "screenX": false,
        "screenY": false,
        "ScriptProcessorNode": false,
        "scroll": false,
        "scrollbars": false,
        "scrollBy": false,
        "scrollTo": false,
        "scrollX": false,
        "scrollY": false,
        "SecurityPolicyViolationEvent": false,
        "Selection": false,
        "self": false,
        "ServiceWorker": false,
        "ServiceWorkerContainer": false,
        "ServiceWorkerRegistration": false,
        "sessionStorage": false,
        "setInterval": false,
        "setTimeout": false,
        "ShadowRoot": false,
        "SharedWorker": false,
        "SourceBuffer": false,
        "SourceBufferList": false,
        "speechSynthesis": false,
        "SpeechSynthesisEvent": false,
        "SpeechSynthesisUtterance": false,
        "StaticRange": false,
        "status": false,
        "statusbar": false,
        "StereoPannerNode": false,
        "stop": false,
        "Storage": false,
        "StorageEvent": false,
        "StorageManager": false,
        "structuredClone": false,
        "styleMedia": false,
        "StyleSheet": false,
        "StyleSheetList": false,
        "SubmitEvent": false,
        "SubtleCrypto": false,
        "SVGAElement": false,
        "SVGAngle": false,
        "SVGAnimatedAngle": false,
        "SVGAnimatedBoolean": false,
        "SVGAnimatedEnumeration": false,
        "SVGAnimatedInteger": false,
        "SVGAnimatedLength": false,
        "SVGAnimatedLengthList": false,
        "SVGAnimatedNumber": false,
        "SVGAnimatedNumberList": false,
        "SVGAnimatedPreserveAspectRatio": false,
        "SVGAnimatedRect": false,
        "SVGAnimatedString": false,
        "SVGAnimatedTransformList": false,
        "SVGAnimateElement": false,
        "SVGAnimateMotionElement": false,
        "SVGAnimateTransformElement": false,
        "SVGAnimationElement": false,
        "SVGCircleElement": false,
        "SVGClipPathElement": false,
        "SVGComponentTransferFunctionElement": false,
        "SVGDefsElement": false,
        "SVGDescElement": false,
        "SVGDiscardElement": false,
        "SVGElement": false,
        "SVGEllipseElement": false,
        "SVGFEBlendElement": false,
        "SVGFEColorMatrixElement": false,
        "SVGFEComponentTransferElement": false,
        "SVGFECompositeElement": false,
        "SVGFEConvolveMatrixElement": false,
        "SVGFEDiffuseLightingElement": false,
        "SVGFEDisplacementMapElement": false,
        "SVGFEDistantLightElement": false,
        "SVGFEDropShadowElement": false,
        "SVGFEFloodElement": false,
        "SVGFEFuncAElement": false,
        "SVGFEFuncBElement": false,
        "SVGFEFuncGElement": false,
        "SVGFEFuncRElement": false,
        "SVGFEGaussianBlurElement": false,
        "SVGFEImageElement": false,
        "SVGFEMergeElement": false,
        "SVGFEMergeNodeElement": false,
        "SVGFEMorphologyElement": false,
        "SVGFEOffsetElement": false,
        "SVGFEPointLightElement": false,
        "SVGFESpecularLightingElement": false,
        "SVGFESpotLightElement": false,
        "SVGFETileElement": false,
        "SVGFETurbulenceElement": false,
        "SVGFilterElement": false,
        "SVGForeignObjectElement": false,
        "SVGGElement": false,
        "SVGGeometryElement": false,
        "SVGGradientElement": false,
        "SVGGraphicsElement": false,
        "SVGImageElement": false,
        "SVGLength": false,
        "SVGLengthList": false,
        "SVGLinearGradientElement": false,
        "SVGLineElement": false,
        "SVGMarkerElement": false,
        "SVGMaskElement": false,
        "SVGMatrix": false,
        "SVGMetadataElement": false,
        "SVGMPathElement": false,
        "SVGNumber": false,
        "SVGNumberList": false,
        "SVGPathElement": false,
        "SVGPatternElement": false,
        "SVGPoint": false,
        "SVGPointList": false,
        "SVGPolygonElement": false,
        "SVGPolylineElement": false,
        "SVGPreserveAspectRatio": false,
        "SVGRadialGradientElement": false,
        "SVGRect": false,
        "SVGRectElement": false,
        "SVGScriptElement": false,
        "SVGSetElement": false,
        "SVGStopElement": false,
        "SVGStringList": false,
        "SVGStyleElement": false,
        "SVGSVGElement": false,
        "SVGSwitchElement": false,
        "SVGSymbolElement": false,
        "SVGTextContentElement": false,
        "SVGTextElement": false,
        "SVGTextPathElement": false,
        "SVGTextPositioningElement": false,
        "SVGTitleElement": false,
        "SVGTransform": false,
        "SVGTransformList": false,
        "SVGTSpanElement": false,
        "SVGUnitTypes": false,
        "SVGUseElement": false,
        "SVGViewElement": false,
        "TaskAttributionTiming": false,
        "Text": false,
        "TextDecoder": false,
        "TextDecoderStream": false,
        "TextEncoder": false,
        "TextEncoderStream": false,
        "TextEvent": false,
        "TextMetrics": false,
        "TextTrack": false,
        "TextTrackCue": false,
        "TextTrackCueList": false,
        "TextTrackList": false,
        "TimeRanges": false,
        "ToggleEvent": false,
        "toolbar": false,
        "top": false,
        "Touch": false,
        "TouchEvent": false,
        "TouchList": false,
        "TrackEvent": false,
        "TransformStream": false,
        "TransformStreamDefaultController": false,
        "TransitionEvent": false,
        "TreeWalker": false,
        "UIEvent": false,
        "URL": false,
        "URLSearchParams": false,
        "ValidityState": false,
        "visualViewport": false,
        "VisualViewport": false,
        "VTTCue": false,
        "WaveShaperNode": false,
        "WebAssembly": false,
        "WebGL2RenderingContext": false,
        "WebGLActiveInfo": false,
        "WebGLBuffer": false,
        "WebGLContextEvent": false,
        "WebGLFramebuffer": false,
        "WebGLProgram": false,
        "WebGLQuery": false,
        "WebGLRenderbuffer": false,
        "WebGLRenderingContext": false,
        "WebGLSampler": false,
        "WebGLShader": false,
        "WebGLShaderPrecisionFormat": false,
        "WebGLSync": false,
        "WebGLTexture": false,
        "WebGLTransformFeedback": false,
        "WebGLUniformLocation": false,
        "WebGLVertexArrayObject": false,
        "WebSocket": false,
        "WheelEvent": false,
        "window": false,
        "Window": false,
        "Worker": false,
        "WritableStream": false,
        "WritableStreamDefaultController": false,
        "WritableStreamDefaultWriter": false,
        "XMLDocument": false,
        "XMLHttpRequest": false,
        "XMLHttpRequestEventTarget": false,
        "XMLHttpRequestUpload": false,
        "XMLSerializer": false,
        "XPathEvaluator": false,
        "XPathExpression": false,
        "XPathResult": false,
        "XSLTProcessor": false
      }
    },
    "plugins": {
      "@stylistic": {
        "rules": {
          "array-bracket-newline": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce linebreaks after opening and before closing array brackets",
                "url": "https://eslint.style/rules/js/array-bracket-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": ["always", "never", "consistent"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "boolean"
                        },
                        "minItems": {
                          "type": ["integer", "null"],
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "missingClosingLinebreak": "A linebreak is required before ']'."
              }
            }
          },
          "array-bracket-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside array brackets",
                "url": "https://eslint.style/rules/js/array-bracket-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                },
                {
                  "type": "object",
                  "properties": {
                    "singleValue": {
                      "type": "boolean"
                    },
                    "objectsInArrays": {
                      "type": "boolean"
                    },
                    "arraysInArrays": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'."
              }
            }
          },
          "array-element-newline": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce line breaks after each array element",
                "url": "https://eslint.style/rules/js/array-element-newline"
              },
              "fixable": "whitespace",
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": ["always", "never", "consistent"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "boolean"
                          },
                          "minItems": {
                            "type": ["integer", "null"],
                            "minimum": 0
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/basicConfig"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "ArrayExpression": {
                            "$ref": "#/definitions/basicConfig"
                          },
                          "ArrayPattern": {
                            "$ref": "#/definitions/basicConfig"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  }
                ]
              },
              "messages": {
                "unexpectedLineBreak": "There should be no linebreak here.",
                "missingLineBreak": "There should be a linebreak after this element."
              }
            }
          },
          "arrow-parens": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require parentheses around arrow function arguments",
                "url": "https://eslint.style/rules/js/arrow-parens"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "as-needed"]
                },
                {
                  "type": "object",
                  "properties": {
                    "requireForBlockBody": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedParens": "Unexpected parentheses around single function argument.",
                "expectedParens": "Expected parentheses around arrow function argument.",
                "unexpectedParensInline": "Unexpected parentheses around single function argument having a body with no curly braces.",
                "expectedParensBlock": "Expected parentheses around arrow function argument having a body with curly braces."
              }
            }
          },
          "arrow-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after the arrow in arrow functions",
                "url": "https://eslint.style/rules/js/arrow-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": true
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expectedBefore": "Missing space before =>.",
                "unexpectedBefore": "Unexpected space before =>.",
                "expectedAfter": "Missing space after =>.",
                "unexpectedAfter": "Unexpected space after =>."
              }
            }
          },
          "block-spacing": {
            "defaultOptions": ["always"],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/block-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                }
              ],
              "messages": {
                "missing": "Requires a space {{location}} '{{token}}'.",
                "extra": "Unexpected space(s) {{location}} '{{token}}'."
              }
            }
          },
          "brace-style": {
            "defaultOptions": ["1tbs"],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent brace style for blocks",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/brace-style"
              },
              "messages": {
                "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                "blockSameLine": "Statement inside of curly braces should be on next line.",
                "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["1tbs", "stroustrup", "allman"]
                },
                {
                  "type": "object",
                  "properties": {
                    "allowSingleLine": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "comma-dangle": {
            "defaultOptions": ["never"],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow trailing commas",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/comma-dangle"
              },
              "schema": {
                "$defs": {
                  "value": {
                    "type": "string",
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline"
                    ]
                  },
                  "valueWithIgnore": {
                    "type": "string",
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline",
                      "ignore"
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/value"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "arrays": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "objects": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "imports": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "exports": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "functions": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "enums": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "generics": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "tuples": {
                            "$ref": "#/$defs/valueWithIgnore"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                ],
                "additionalItems": false
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected trailing comma.",
                "missing": "Missing trailing comma."
              }
            }
          },
          "comma-spacing": {
            "defaultOptions": [
              {
                "before": false,
                "after": true
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after commas",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/comma-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpected": "There should be no space {{loc}} ','.",
                "missing": "A space is required {{loc}} ','."
              }
            }
          },
          "comma-style": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent comma style",
                "url": "https://eslint.style/rules/js/comma-style"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": ["first", "last"]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                "expectedCommaFirst": "',' should be placed first.",
                "expectedCommaLast": "',' should be placed last."
              }
            }
          },
          "computed-property-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside computed property brackets",
                "url": "https://eslint.style/rules/js/computed-property-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                },
                {
                  "type": "object",
                  "properties": {
                    "enforceForClassMembers": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'."
              }
            }
          },
          "dot-location": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent newlines before and after dots",
                "url": "https://eslint.style/rules/js/dot-location"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": ["object", "property"]
                }
              ],
              "fixable": "code",
              "messages": {
                "expectedDotAfterObject": "Expected dot to be on same line as object.",
                "expectedDotBeforeProperty": "Expected dot to be on same line as property."
              }
            }
          },
          "eol-last": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow newline at the end of files",
                "url": "https://eslint.style/rules/js/eol-last"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never", "unix", "windows"]
                }
              ],
              "messages": {
                "missing": "Newline required at end of file but not found.",
                "unexpected": "Newline not allowed at end of file."
              }
            }
          },
          "func-call-spacing": {
            "defaultOptions": ["never", {}],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing between function identifiers and their invocations",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/function-call-spacing"
              },
              "fixable": "whitespace",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": ["never"]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": ["always"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "allowNewlines": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                "unexpectedNewline": "Unexpected newline between function name and paren.",
                "missing": "Missing space between function name and paren."
              }
            }
          },
          "function-call-argument-newline": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce line breaks between arguments of a function call",
                "url": "https://eslint.style/rules/js/function-call-argument-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never", "consistent"]
                }
              ],
              "messages": {
                "unexpectedLineBreak": "There should be no line break here.",
                "missingLineBreak": "There should be a line break after this argument."
              }
            }
          },
          "function-call-spacing": {
            "defaultOptions": ["never", {}],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing between function identifiers and their invocations",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/function-call-spacing"
              },
              "fixable": "whitespace",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": ["never"]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": ["always"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "allowNewlines": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                "unexpectedNewline": "Unexpected newline between function name and paren.",
                "missing": "Missing space between function name and paren."
              }
            }
          },
          "function-paren-newline": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent line breaks inside function parentheses",
                "url": "https://eslint.style/rules/js/function-paren-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                        "multiline",
                        "multiline-arguments"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "minItems": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "expectedBefore": "Expected newline before ')'.",
                "expectedAfter": "Expected newline after '('.",
                "expectedBetween": "Expected newline between arguments/params.",
                "unexpectedBefore": "Unexpected newline before ')'.",
                "unexpectedAfter": "Unexpected newline after '('."
              }
            }
          },
          "generator-star-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing around `*` operators in generator functions",
                "url": "https://eslint.style/rules/js/generator-star-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": ["before", "after", "both", "neither"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "before": {
                          "type": "boolean"
                        },
                        "after": {
                          "type": "boolean"
                        },
                        "named": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": ["before", "after", "both", "neither"]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "before": {
                                  "type": "boolean"
                                },
                                "after": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "anonymous": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": ["before", "after", "both", "neither"]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "before": {
                                  "type": "boolean"
                                },
                                "after": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "method": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": ["before", "after", "both", "neither"]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "before": {
                                  "type": "boolean"
                                },
                                "after": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "missingBefore": "Missing space before *.",
                "missingAfter": "Missing space after *.",
                "unexpectedBefore": "Unexpected space before *.",
                "unexpectedAfter": "Unexpected space after *."
              }
            }
          },
          "implicit-arrow-linebreak": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the location of arrow function bodies",
                "url": "https://eslint.style/rules/js/implicit-arrow-linebreak"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["beside", "below"]
                }
              ],
              "messages": {
                "expected": "Expected a linebreak before this expression.",
                "unexpected": "Expected no linebreak before this expression."
              }
            }
          },
          "indent": {
            "defaultOptions": [
              4,
              {
                "SwitchCase": 1,
                "flatTernaryExpressions": false,
                "ignoredNodes": []
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent indentation",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/indent"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": ["tab"]
                    },
                    {
                      "type": "integer",
                      "minimum": 0
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "SwitchCase": {
                      "type": "integer",
                      "minimum": 0,
                      "default": 0
                    },
                    "VariableDeclarator": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "integer",
                              "minimum": 0
                            },
                            {
                              "type": "string",
                              "enum": ["first", "off"]
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "var": {
                              "oneOf": [
                                {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                {
                                  "type": "string",
                                  "enum": ["first", "off"]
                                }
                              ]
                            },
                            "let": {
                              "oneOf": [
                                {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                {
                                  "type": "string",
                                  "enum": ["first", "off"]
                                }
                              ]
                            },
                            "const": {
                              "oneOf": [
                                {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                {
                                  "type": "string",
                                  "enum": ["first", "off"]
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    },
                    "outerIIFEBody": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "type": "string",
                          "enum": ["off"]
                        }
                      ]
                    },
                    "MemberExpression": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "type": "string",
                          "enum": ["off"]
                        }
                      ]
                    },
                    "FunctionDeclaration": {
                      "type": "object",
                      "properties": {
                        "parameters": {
                          "oneOf": [
                            {
                              "type": "integer",
                              "minimum": 0
                            },
                            {
                              "type": "string",
                              "enum": ["first", "off"]
                            }
                          ]
                        },
                        "body": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "FunctionExpression": {
                      "type": "object",
                      "properties": {
                        "parameters": {
                          "oneOf": [
                            {
                              "type": "integer",
                              "minimum": 0
                            },
                            {
                              "type": "string",
                              "enum": ["first", "off"]
                            }
                          ]
                        },
                        "body": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "StaticBlock": {
                      "type": "object",
                      "properties": {
                        "body": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "CallExpression": {
                      "type": "object",
                      "properties": {
                        "arguments": {
                          "oneOf": [
                            {
                              "type": "integer",
                              "minimum": 0
                            },
                            {
                              "type": "string",
                              "enum": ["first", "off"]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "ArrayExpression": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "type": "string",
                          "enum": ["first", "off"]
                        }
                      ]
                    },
                    "ObjectExpression": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "type": "string",
                          "enum": ["first", "off"]
                        }
                      ]
                    },
                    "ImportDeclaration": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "type": "string",
                          "enum": ["first", "off"]
                        }
                      ]
                    },
                    "flatTernaryExpressions": {
                      "type": "boolean",
                      "default": false
                    },
                    "offsetTernaryExpressions": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignoredNodes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "not": {
                          "pattern": ":exit$"
                        }
                      }
                    },
                    "ignoreComments": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
              }
            }
          },
          "jsx-quotes": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
                "url": "https://eslint.style/rules/js/jsx-quotes"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["prefer-single", "prefer-double"]
                }
              ],
              "messages": {
                "unexpected": "Unexpected usage of {{description}}."
              }
            }
          },
          "key-spacing": {
            "defaultOptions": [{}],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/key-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "align": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": ["colon", "value"]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "mode": {
                                  "type": "string",
                                  "enum": ["strict", "minimum"]
                                },
                                "on": {
                                  "type": "string",
                                  "enum": ["colon", "value"]
                                },
                                "beforeColon": {
                                  "type": "boolean"
                                },
                                "afterColon": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "mode": {
                          "type": "string",
                          "enum": ["strict", "minimum"]
                        },
                        "beforeColon": {
                          "type": "boolean"
                        },
                        "afterColon": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleLine": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["strict", "minimum"]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "multiLine": {
                          "type": "object",
                          "properties": {
                            "align": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "enum": ["colon", "value"]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "mode": {
                                      "type": "string",
                                      "enum": ["strict", "minimum"]
                                    },
                                    "on": {
                                      "type": "string",
                                      "enum": ["colon", "value"]
                                    },
                                    "beforeColon": {
                                      "type": "boolean"
                                    },
                                    "afterColon": {
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              ]
                            },
                            "mode": {
                              "type": "string",
                              "enum": ["strict", "minimum"]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleLine": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["strict", "minimum"]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "multiLine": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["strict", "minimum"]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "align": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["strict", "minimum"]
                            },
                            "on": {
                              "type": "string",
                              "enum": ["colon", "value"]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
              }
            }
          },
          "keyword-spacing": {
            "defaultOptions": [{}],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after keywords",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/keyword-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": true
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    },
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "abstract": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "as": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "async": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "await": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "boolean": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "break": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "byte": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "case": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "catch": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "char": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "class": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "const": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "continue": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "debugger": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "default": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "do": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "double": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "else": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "enum": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "export": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "extends": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "false": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "final": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "finally": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "float": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "for": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "from": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "get": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "goto": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "if": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "implements": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "import": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "in": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "instanceof": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "int": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "interface": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "let": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "long": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "native": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "new": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "null": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "of": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "package": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "private": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "protected": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "public": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "return": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "set": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "short": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "static": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "super": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "switch": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "synchronized": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "this": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "throw": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "throws": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "transient": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "true": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "try": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "typeof": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "var": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "void": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "volatile": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "while": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "with": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "yield": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expectedBefore": "Expected space(s) before \"{{value}}\".",
                "expectedAfter": "Expected space(s) after \"{{value}}\".",
                "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
                "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
              }
            }
          },
          "linebreak-style": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreak style",
                "url": "https://eslint.style/rules/js/linebreak-style"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["unix", "windows"]
                }
              ],
              "messages": {
                "expectedLF": "Expected linebreaks to be 'LF' but found 'CRLF'.",
                "expectedCRLF": "Expected linebreaks to be 'CRLF' but found 'LF'."
              }
            }
          },
          "lines-around-comment": {
            "defaultOptions": [
              {
                "beforeBlockComment": true
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require empty lines around comments",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/lines-around-comment"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "beforeBlockComment": {
                      "type": "boolean",
                      "default": true
                    },
                    "afterBlockComment": {
                      "type": "boolean",
                      "default": false
                    },
                    "beforeLineComment": {
                      "type": "boolean",
                      "default": false
                    },
                    "afterLineComment": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowBlockStart": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowBlockEnd": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowClassStart": {
                      "type": "boolean"
                    },
                    "allowClassEnd": {
                      "type": "boolean"
                    },
                    "allowObjectStart": {
                      "type": "boolean"
                    },
                    "allowObjectEnd": {
                      "type": "boolean"
                    },
                    "allowArrayStart": {
                      "type": "boolean"
                    },
                    "allowArrayEnd": {
                      "type": "boolean"
                    },
                    "allowInterfaceStart": {
                      "type": "boolean"
                    },
                    "allowInterfaceEnd": {
                      "type": "boolean"
                    },
                    "allowTypeStart": {
                      "type": "boolean"
                    },
                    "allowTypeEnd": {
                      "type": "boolean"
                    },
                    "allowEnumStart": {
                      "type": "boolean"
                    },
                    "allowEnumEnd": {
                      "type": "boolean"
                    },
                    "allowModuleStart": {
                      "type": "boolean"
                    },
                    "allowModuleEnd": {
                      "type": "boolean"
                    },
                    "ignorePattern": {
                      "type": "string"
                    },
                    "applyDefaultIgnorePatterns": {
                      "type": "boolean"
                    },
                    "afterHashbangComment": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "after": "Expected line after comment.",
                "before": "Expected line before comment."
              }
            }
          },
          "lines-between-class-members": {
            "defaultOptions": [
              "always",
              {
                "exceptAfterOverload": true,
                "exceptAfterSingleLine": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow an empty line between class members",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/lines-between-class-members"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "enforce": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "blankLine": {
                                "type": "string",
                                "enum": ["always", "never"]
                              },
                              "prev": {
                                "type": "string",
                                "enum": ["method", "field", "*"]
                              },
                              "next": {
                                "type": "string",
                                "enum": ["method", "field", "*"]
                              }
                            },
                            "additionalProperties": false,
                            "required": ["blankLine", "prev", "next"]
                          },
                          "minItems": 1
                        }
                      },
                      "additionalProperties": false,
                      "required": ["enforce"]
                    },
                    {
                      "type": "string",
                      "enum": ["always", "never"]
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptAfterSingleLine": {
                      "type": "boolean",
                      "default": false
                    },
                    "exceptAfterOverload": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "never": "Unexpected blank line between class members.",
                "always": "Expected blank line between class members."
              }
            }
          },
          "max-len": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce a maximum line length",
                "url": "https://eslint.style/rules/js/max-len"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "comments": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "tabWidth": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "ignorePattern": {
                          "type": "string"
                        },
                        "ignoreComments": {
                          "type": "boolean"
                        },
                        "ignoreStrings": {
                          "type": "boolean"
                        },
                        "ignoreUrls": {
                          "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                          "type": "boolean"
                        },
                        "ignoreRegExpLiterals": {
                          "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "integer",
                      "minimum": 0
                    }
                  ]
                },
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "comments": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "tabWidth": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "ignorePattern": {
                          "type": "string"
                        },
                        "ignoreComments": {
                          "type": "boolean"
                        },
                        "ignoreStrings": {
                          "type": "boolean"
                        },
                        "ignoreUrls": {
                          "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                          "type": "boolean"
                        },
                        "ignoreRegExpLiterals": {
                          "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "integer",
                      "minimum": 0
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "comments": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "tabWidth": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "ignorePattern": {
                      "type": "string"
                    },
                    "ignoreComments": {
                      "type": "boolean"
                    },
                    "ignoreStrings": {
                      "type": "boolean"
                    },
                    "ignoreUrls": {
                      "type": "boolean"
                    },
                    "ignoreTemplateLiterals": {
                      "type": "boolean"
                    },
                    "ignoreRegExpLiterals": {
                      "type": "boolean"
                    },
                    "ignoreTrailingComments": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
                "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
              }
            }
          },
          "max-statements-per-line": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce a maximum number of statements allowed per line",
                "url": "https://eslint.style/rules/js/max-statements-per-line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "integer",
                      "minimum": 1,
                      "default": 1
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "exceed": "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}."
              }
            }
          },
          "multiline-ternary": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce newlines between operands of ternary expressions",
                "url": "https://eslint.style/rules/js/multiline-ternary"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "always-multiline", "never"]
                }
              ],
              "messages": {
                "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
                "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
                "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
                "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression."
              },
              "fixable": "whitespace"
            }
          },
          "new-parens": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
                "url": "https://eslint.style/rules/js/new-parens"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                }
              ],
              "messages": {
                "missing": "Missing '()' invoking a constructor.",
                "unnecessary": "Unnecessary '()' invoking a constructor with no arguments."
              }
            }
          },
          "newline-per-chained-call": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require a newline after each call in a method chain",
                "url": "https://eslint.style/rules/js/newline-per-chained-call"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreChainWithDepth": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 10,
                      "default": 2
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expected": "Expected line break before `{{callee}}`."
              }
            }
          },
          "no-confusing-arrow": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow arrow functions where they could be confused with comparisons",
                "url": "https://eslint.style/rules/js/no-confusing-arrow"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowParens": {
                      "type": "boolean",
                      "default": true
                    },
                    "onlyOneSimpleParam": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "confusing": "Arrow function used ambiguously with a conditional expression."
              }
            }
          },
          "no-extra-parens": {
            "defaultOptions": ["all"],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow unnecessary parentheses",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/no-extra-parens"
              },
              "fixable": "code",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": ["functions"]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": ["all"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "conditionalAssign": {
                            "type": "boolean"
                          },
                          "ternaryOperandBinaryExpressions": {
                            "type": "boolean"
                          },
                          "nestedBinaryExpressions": {
                            "type": "boolean"
                          },
                          "returnAssign": {
                            "type": "boolean"
                          },
                          "ignoreJSX": {
                            "type": "string",
                            "enum": ["none", "all", "single-line", "multi-line"]
                          },
                          "enforceForArrowConditionals": {
                            "type": "boolean"
                          },
                          "enforceForSequenceExpressions": {
                            "type": "boolean"
                          },
                          "enforceForNewInMemberExpressions": {
                            "type": "boolean"
                          },
                          "enforceForFunctionPrototypeMethods": {
                            "type": "boolean"
                          },
                          "allowParensAfterCommentPattern": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "unexpected": "Unnecessary parentheses around expression."
              }
            }
          },
          "no-extra-semi": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow unnecessary semicolons",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/no-extra-semi"
              },
              "fixable": "code",
              "schema": [],
              "messages": {
                "unexpected": "Unnecessary semicolon."
              }
            }
          },
          "no-floating-decimal": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow leading or trailing decimal points in numeric literals",
                "url": "https://eslint.style/rules/js/no-floating-decimal"
              },
              "schema": [],
              "fixable": "code",
              "messages": {
                "leading": "A leading decimal point can be confused with a dot.",
                "trailing": "A trailing decimal point can be confused with a dot."
              }
            }
          },
          "no-mixed-operators": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow mixed binary operators",
                "url": "https://eslint.style/rules/js/no-mixed-operators"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "+",
                            "-",
                            "*",
                            "/",
                            "%",
                            "**",
                            "&",
                            "|",
                            "^",
                            "~",
                            "<<",
                            ">>",
                            ">>>",
                            "==",
                            "!=",
                            "===",
                            "!==",
                            ">",
                            ">=",
                            "<",
                            "<=",
                            "&&",
                            "||",
                            "in",
                            "instanceof",
                            "?:",
                            "??"
                          ]
                        },
                        "minItems": 2,
                        "uniqueItems": true
                      },
                      "uniqueItems": true
                    },
                    "allowSamePrecedence": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedMixedOperator": "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations."
              }
            }
          },
          "no-mixed-spaces-and-tabs": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow mixed spaces and tabs for indentation",
                "url": "https://eslint.style/rules/js/no-mixed-spaces-and-tabs"
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": ["smart-tabs"]
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              ],
              "messages": {
                "mixedSpacesAndTabs": "Mixed spaces and tabs."
              }
            }
          },
          "no-multi-spaces": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow multiple spaces",
                "url": "https://eslint.style/rules/js/no-multi-spaces"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "object",
                      "patternProperties": {
                        "^([A-Z][a-z]*)+$": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "ignoreEOLComments": {
                      "type": "boolean",
                      "default": false
                    },
                    "includeTabs": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "multipleSpaces": "Multiple spaces found before '{{displayValue}}'."
              }
            }
          },
          "no-multiple-empty-lines": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow multiple empty lines",
                "url": "https://eslint.style/rules/js/no-multiple-empty-lines"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "maxEOF": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "maxBOF": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "required": ["max"],
                  "additionalProperties": false
                }
              ],
              "messages": {
                "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed."
              }
            }
          },
          "no-tabs": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow all tabs",
                "url": "https://eslint.style/rules/js/no-tabs"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowIndentationTabs": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedTab": "Unexpected tab character."
              }
            }
          },
          "no-trailing-spaces": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow trailing whitespace at the end of lines",
                "url": "https://eslint.style/rules/js/no-trailing-spaces"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "skipBlankLines": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignoreComments": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "trailingSpace": "Trailing spaces not allowed."
              }
            }
          },
          "no-whitespace-before-property": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow whitespace before properties",
                "url": "https://eslint.style/rules/js/no-whitespace-before-property"
              },
              "fixable": "whitespace",
              "schema": [],
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace before property {{propName}}."
              }
            }
          },
          "nonblock-statement-body-position": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the location of single-line statements",
                "url": "https://eslint.style/rules/js/nonblock-statement-body-position"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["beside", "below", "any"]
                },
                {
                  "type": "object",
                  "properties": {
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "if": {
                          "type": "string",
                          "enum": ["beside", "below", "any"]
                        },
                        "else": {
                          "type": "string",
                          "enum": ["beside", "below", "any"]
                        },
                        "while": {
                          "type": "string",
                          "enum": ["beside", "below", "any"]
                        },
                        "do": {
                          "type": "string",
                          "enum": ["beside", "below", "any"]
                        },
                        "for": {
                          "type": "string",
                          "enum": ["beside", "below", "any"]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expectNoLinebreak": "Expected no linebreak before this statement.",
                "expectLinebreak": "Expected a linebreak before this statement."
              }
            }
          },
          "object-curly-newline": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent line breaks after opening and before closing braces",
                "url": "https://eslint.style/rules/js/object-curly-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": ["always", "never"]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "multiline": {
                              "type": "boolean"
                            },
                            "minProperties": {
                              "type": "integer",
                              "minimum": 0
                            },
                            "consistent": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false,
                          "minProperties": 1
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": ["always", "never"]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multiline": {
                                  "type": "boolean"
                                },
                                "minProperties": {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                "consistent": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false,
                              "minProperties": 1
                            }
                          ]
                        },
                        "ObjectPattern": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": ["always", "never"]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multiline": {
                                  "type": "boolean"
                                },
                                "minProperties": {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                "consistent": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false,
                              "minProperties": 1
                            }
                          ]
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": ["always", "never"]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multiline": {
                                  "type": "boolean"
                                },
                                "minProperties": {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                "consistent": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false,
                              "minProperties": 1
                            }
                          ]
                        },
                        "ExportDeclaration": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": ["always", "never"]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multiline": {
                                  "type": "boolean"
                                },
                                "minProperties": {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                "consistent": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false,
                              "minProperties": 1
                            }
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
              }
            }
          },
          "object-curly-spacing": {
            "defaultOptions": ["never"],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside braces",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/object-curly-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                },
                {
                  "type": "object",
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean"
                    },
                    "objectsInObjects": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
              }
            }
          },
          "object-property-newline": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce placing object properties on separate lines",
                "url": "https://eslint.style/rules/js/object-property-newline"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowAllPropertiesOnSameLine": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowMultiplePropertiesPerLine": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                "propertiesOnNewline": "Object properties must go on a new line."
              }
            }
          },
          "one-var-declaration-per-line": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow newlines around variable declarations",
                "url": "https://eslint.style/rules/js/one-var-declaration-per-line"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "initializations"]
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "expectVarOnNewline": "Expected variable declaration to be on a new line."
              }
            }
          },
          "operator-linebreak": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreak style for operators",
                "url": "https://eslint.style/rules/js/operator-linebreak"
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": ["after", "before", "none"]
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "overrides": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string",
                        "enum": ["after", "before", "none", "ignore"]
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "code",
              "messages": {
                "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
                "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
                "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
                "noLinebreak": "There should be no line break before or after '{{operator}}'."
              }
            }
          },
          "padded-blocks": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow padding within blocks",
                "url": "https://eslint.style/rules/js/padded-blocks"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": ["always", "never"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "blocks": {
                          "type": "string",
                          "enum": ["always", "never"]
                        },
                        "switches": {
                          "type": "string",
                          "enum": ["always", "never"]
                        },
                        "classes": {
                          "type": "string",
                          "enum": ["always", "never"]
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "allowSingleLineBlocks": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "alwaysPadBlock": "Block must be padded by blank lines.",
                "neverPadBlock": "Block must not be padded by blank lines."
              }
            }
          },
          "padding-line-between-statements": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow padding lines between statements",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/padding-line-between-statements"
              },
              "fixable": "whitespace",
              "hasSuggestions": false,
              "schema": {
                "$defs": {
                  "paddingType": {
                    "type": "string",
                    "enum": ["any", "never", "always"]
                  },
                  "statementType": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "*",
                          "block-like",
                          "exports",
                          "require",
                          "directive",
                          "expression",
                          "iife",
                          "multiline-block-like",
                          "multiline-expression",
                          "multiline-const",
                          "multiline-let",
                          "multiline-var",
                          "singleline-const",
                          "singleline-let",
                          "singleline-var",
                          "block",
                          "empty",
                          "function",
                          "break",
                          "case",
                          "class",
                          "const",
                          "continue",
                          "debugger",
                          "default",
                          "do",
                          "export",
                          "for",
                          "if",
                          "import",
                          "let",
                          "return",
                          "switch",
                          "throw",
                          "try",
                          "var",
                          "while",
                          "with",
                          "cjs-export",
                          "cjs-import",
                          "interface",
                          "type",
                          "function-overload"
                        ]
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "*",
                            "block-like",
                            "exports",
                            "require",
                            "directive",
                            "expression",
                            "iife",
                            "multiline-block-like",
                            "multiline-expression",
                            "multiline-const",
                            "multiline-let",
                            "multiline-var",
                            "singleline-const",
                            "singleline-let",
                            "singleline-var",
                            "block",
                            "empty",
                            "function",
                            "break",
                            "case",
                            "class",
                            "const",
                            "continue",
                            "debugger",
                            "default",
                            "do",
                            "export",
                            "for",
                            "if",
                            "import",
                            "let",
                            "return",
                            "switch",
                            "throw",
                            "try",
                            "var",
                            "while",
                            "with",
                            "cjs-export",
                            "cjs-import",
                            "interface",
                            "type",
                            "function-overload"
                          ]
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "additionalItems": false
                      }
                    ]
                  }
                },
                "type": "array",
                "additionalItems": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "blankLine": {
                      "$ref": "#/$defs/paddingType"
                    },
                    "prev": {
                      "$ref": "#/$defs/statementType"
                    },
                    "next": {
                      "$ref": "#/$defs/statementType"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["blankLine", "prev", "next"]
                }
              },
              "messages": {
                "unexpectedBlankLine": "Unexpected blank line before this statement.",
                "expectedBlankLine": "Expected blank line before this statement."
              }
            }
          },
          "quote-props": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require quotes around object literal property names",
                "url": "https://eslint.style/rules/js/quote-props"
              },
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed"
                        ]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "keywords": {
                            "type": "boolean"
                          },
                          "unnecessary": {
                            "type": "boolean"
                          },
                          "numbers": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "fixable": "code",
              "messages": {
                "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant."
              }
            }
          },
          "quotes": {
            "defaultOptions": [
              "double",
              {
                "allowTemplateLiterals": false,
                "avoidEscape": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the consistent use of either backticks, double, or single quotes",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/quotes"
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}."
              },
              "schema": [
                {
                  "type": "string",
                  "enum": ["single", "double", "backtick"]
                },
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": ["avoid-escape"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "avoidEscape": {
                          "type": "boolean"
                        },
                        "allowTemplateLiterals": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "rest-spread-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce spacing between rest and spread operators and their expressions",
                "url": "https://eslint.style/rules/js/rest-spread-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                }
              ],
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace after {{type}} operator.",
                "expectedWhitespace": "Expected whitespace after {{type}} operator."
              }
            }
          },
          "semi": {
            "defaultOptions": [
              "always",
              {
                "omitLastInOneLineBlock": false,
                "beforeStatementContinuationChars": "any"
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow semicolons instead of ASI",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/semi"
              },
              "fixable": "code",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": ["never"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "beforeStatementContinuationChars": {
                            "type": "string",
                            "enum": ["always", "any", "never"]
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": ["always"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "omitLastInOneLineBlock": {
                            "type": "boolean"
                          },
                          "omitLastInOneLineClassBody": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "missingSemi": "Missing semicolon.",
                "extraSemi": "Extra semicolon."
              }
            }
          },
          "semi-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after semicolons",
                "url": "https://eslint.style/rules/js/semi-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedWhitespaceBefore": "Unexpected whitespace before semicolon.",
                "unexpectedWhitespaceAfter": "Unexpected whitespace after semicolon.",
                "missingWhitespaceBefore": "Missing whitespace before semicolon.",
                "missingWhitespaceAfter": "Missing whitespace after semicolon."
              }
            }
          },
          "semi-style": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce location of semicolons",
                "url": "https://eslint.style/rules/js/semi-style"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": ["last", "first"]
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "expectedSemiColon": "Expected this semicolon to be at {{pos}}."
              }
            }
          },
          "space-before-blocks": {
            "defaultOptions": ["always"],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before blocks",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/space-before-blocks"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": ["always", "never"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "keywords": {
                          "type": "string",
                          "enum": ["always", "never", "off"]
                        },
                        "functions": {
                          "type": "string",
                          "enum": ["always", "never", "off"]
                        },
                        "classes": {
                          "type": "string",
                          "enum": ["always", "never", "off"]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedSpace": "Unexpected space before opening brace.",
                "missingSpace": "Missing space before opening brace."
              }
            }
          },
          "space-before-function-paren": {
            "defaultOptions": ["always"],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before function parenthesis",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/space-before-function-paren"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": ["always", "never"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "anonymous": {
                          "type": "string",
                          "enum": ["always", "never", "ignore"]
                        },
                        "named": {
                          "type": "string",
                          "enum": ["always", "never", "ignore"]
                        },
                        "asyncArrow": {
                          "type": "string",
                          "enum": ["always", "never", "ignore"]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpected": "Unexpected space before function parentheses.",
                "missing": "Missing space before function parentheses."
              }
            }
          },
          "space-in-parens": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside parentheses",
                "url": "https://eslint.style/rules/js/space-in-parens"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": ["{}", "[]", "()", "empty"]
                      },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "missingOpeningSpace": "There must be a space after this paren.",
                "missingClosingSpace": "There must be a space before this paren.",
                "rejectedOpeningSpace": "There should be no space after this paren.",
                "rejectedClosingSpace": "There should be no space before this paren."
              }
            }
          },
          "space-infix-ops": {
            "defaultOptions": [
              {
                "int32Hint": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require spacing around infix operators",
                "extendsBaseRule": true,
                "url": "https://eslint.style/rules/ts/space-infix-ops"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "int32Hint": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "missingSpace": "Operator '{{operator}}' must be spaced."
              }
            }
          },
          "space-unary-ops": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before or after unary operators",
                "url": "https://eslint.style/rules/js/space-unary-ops"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "words": {
                      "type": "boolean",
                      "default": true
                    },
                    "nonwords": {
                      "type": "boolean",
                      "default": false
                    },
                    "overrides": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
                "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
                "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'."
              }
            }
          },
          "spaced-comment": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
                "url": "https://eslint.style/rules/js/spaced-comment"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "markers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "line": {
                      "type": "object",
                      "properties": {
                        "exceptions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "markers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "block": {
                      "type": "object",
                      "properties": {
                        "exceptions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "markers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "balanced": {
                          "type": "boolean",
                          "default": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedSpaceAfterMarker": "Unexpected space or tab after marker ({{refChar}}) in comment.",
                "expectedExceptionAfter": "Expected exception block, space or tab after '{{refChar}}' in comment.",
                "unexpectedSpaceBefore": "Unexpected space or tab before '*/' in comment.",
                "unexpectedSpaceAfter": "Unexpected space or tab after '{{refChar}}' in comment.",
                "expectedSpaceBefore": "Expected space or tab before '*/' in comment.",
                "expectedSpaceAfter": "Expected space or tab after '{{refChar}}' in comment."
              }
            }
          },
          "switch-colon-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce spacing around colons of switch statements",
                "url": "https://eslint.style/rules/js/switch-colon-spacing"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "expectedBefore": "Expected space(s) before this colon.",
                "expectedAfter": "Expected space(s) after this colon.",
                "unexpectedBefore": "Unexpected space(s) before this colon.",
                "unexpectedAfter": "Unexpected space(s) after this colon."
              }
            }
          },
          "template-curly-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing around embedded expressions of template strings",
                "url": "https://eslint.style/rules/js/template-curly-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                }
              ],
              "messages": {
                "expectedBefore": "Expected space(s) before '}'.",
                "expectedAfter": "Expected space(s) after '${'.",
                "unexpectedBefore": "Unexpected space(s) before '}'.",
                "unexpectedAfter": "Unexpected space(s) after '${'."
              }
            }
          },
          "template-tag-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing between template tags and their literals",
                "url": "https://eslint.style/rules/js/template-tag-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                }
              ],
              "messages": {
                "unexpected": "Unexpected space between template tag and template literal.",
                "missing": "Missing space between template tag and template literal."
              }
            }
          },
          "wrap-iife": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require parentheses around immediate `function` invocations",
                "url": "https://eslint.style/rules/js/wrap-iife"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": ["outside", "inside", "any"]
                },
                {
                  "type": "object",
                  "properties": {
                    "functionPrototypeMethods": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "code",
              "messages": {
                "wrapInvocation": "Wrap an immediate function invocation in parentheses.",
                "wrapExpression": "Wrap only the function expression in parens.",
                "moveInvocation": "Move the invocation into the parens that contain the function."
              }
            }
          },
          "wrap-regex": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require parenthesis around regex literals",
                "url": "https://eslint.style/rules/js/wrap-regex"
              },
              "schema": [],
              "fixable": "code",
              "messages": {
                "requireParens": "Wrap the regexp literal in parens to disambiguate the slash."
              }
            }
          },
          "yield-star-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing around the `*` in `yield*` expressions",
                "url": "https://eslint.style/rules/js/yield-star-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": ["before", "after", "both", "neither"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "before": {
                          "type": "boolean"
                        },
                        "after": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "missingBefore": "Missing space before *.",
                "missingAfter": "Missing space after *.",
                "unexpectedBefore": "Unexpected space before *.",
                "unexpectedAfter": "Unexpected space after *."
              }
            }
          },
          "jsx-child-element-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-child-element-spacing"
              },
              "messages": {
                "spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
                "spacingBeforeNext": "Ambiguous spacing before next element {{element}}"
              },
              "schema": []
            }
          },
          "jsx-closing-bracket-location": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce closing bracket location in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-closing-bracket-location"
              },
              "fixable": "code",
              "messages": {
                "bracketLocation": "The closing bracket must be {{location}}{{details}}"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nonEmpty": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned"
                              ]
                            },
                            {
                              "type": "boolean",
                              "enum": [false]
                            }
                          ]
                        },
                        "selfClosing": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned"
                              ]
                            },
                            {
                              "type": "boolean",
                              "enum": [false]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "jsx-closing-tag-location": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce closing tag location for multiline JSX",
                "url": "https://eslint.style/rules/jsx/jsx-closing-tag-location"
              },
              "fixable": "whitespace",
              "messages": {
                "onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
                "matchIndent": "Expected closing tag to match indentation of opening."
              },
              "schema": []
            }
          },
          "jsx-curly-brace-presence": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
                "url": "https://eslint.style/rules/jsx/jsx-curly-brace-presence"
              },
              "fixable": "code",
              "messages": {
                "unnecessaryCurly": "Curly braces are unnecessary here.",
                "missingCurly": "Need to wrap this literal in a JSX expression."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "props": {
                          "type": "string",
                          "enum": ["always", "never", "ignore"]
                        },
                        "children": {
                          "type": "string",
                          "enum": ["always", "never", "ignore"]
                        },
                        "propElementValues": {
                          "type": "string",
                          "enum": ["always", "never", "ignore"]
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "string",
                      "enum": ["always", "never", "ignore"]
                    }
                  ]
                }
              ]
            }
          },
          "jsx-curly-newline": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
                "recommended": "stylistic",
                "url": "https://eslint.style/rules/jsx/jsx-curly-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": ["consistent", "never"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleline": {
                          "type": "string",
                          "enum": ["consistent", "require", "forbid"]
                        },
                        "multiline": {
                          "type": "string",
                          "enum": ["consistent", "require", "forbid"]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "expectedBefore": "Expected newline before '}'.",
                "expectedAfter": "Expected newline after '{'.",
                "unexpectedBefore": "Unexpected newline before '}'.",
                "unexpectedAfter": "Unexpected newline after '{'."
              }
            }
          },
          "jsx-curly-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-curly-spacing"
              },
              "fixable": "code",
              "messages": {
                "noNewlineAfter": "There should be no newline after '{{token}}'",
                "noNewlineBefore": "There should be no newline before '{{token}}'",
                "noSpaceAfter": "There should be no space after '{{token}}'",
                "noSpaceBefore": "There should be no space before '{{token}}'",
                "spaceNeededAfter": "A space is required after '{{token}}'",
                "spaceNeededBefore": "A space is required before '{{token}}'"
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "type": "object",
                    "properties": {
                      "when": {
                        "type": "string",
                        "enum": ["always", "never"]
                      },
                      "allowMultiline": {
                        "type": "boolean"
                      },
                      "spacing": {
                        "type": "object",
                        "properties": {
                          "objectLiterals": {
                            "type": "string",
                            "enum": ["always", "never"]
                          }
                        }
                      }
                    }
                  },
                  "basicConfigOrBoolean": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/basicConfig"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "anyOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/definitions/basicConfig"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "$ref": "#/definitions/basicConfigOrBoolean"
                              },
                              "children": {
                                "$ref": "#/definitions/basicConfigOrBoolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "type": "string",
                        "enum": ["always", "never"]
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean"
                      },
                      "spacing": {
                        "type": "object",
                        "properties": {
                          "objectLiterals": {
                            "type": "string",
                            "enum": ["always", "never"]
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "jsx-equals-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow spaces around equal signs in JSX attributes",
                "url": "https://eslint.style/rules/jsx/jsx-equals-spacing"
              },
              "fixable": "code",
              "messages": {
                "noSpaceBefore": "There should be no space before '='",
                "noSpaceAfter": "There should be no space after '='",
                "needSpaceBefore": "A space is required before '='",
                "needSpaceAfter": "A space is required after '='"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": ["always", "never"]
                }
              ]
            }
          },
          "jsx-first-prop-new-line": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce proper position of the first property in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-first-prop-new-line"
              },
              "fixable": "code",
              "messages": {
                "propOnNewLine": "Property should be placed on a new line",
                "propOnSameLine": "Property should be placed on the same line as the component declaration"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "multiline",
                    "multiline-multiprop",
                    "multiprop"
                  ]
                }
              ]
            }
          },
          "jsx-indent": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce JSX indentation",
                "url": "https://eslint.style/rules/jsx/jsx-indent"
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": ["tab"]
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "checkAttributes": {
                      "type": "boolean"
                    },
                    "indentLogicalExpressions": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-indent-props": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce props indentation in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-indent-props"
              },
              "fixable": "code",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": ["tab", "first"]
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "indentMode": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": ["tab", "first"]
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "ignoreTernaryOperator": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "jsx-max-props-per-line": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce maximum of props on a single line in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-max-props-per-line"
              },
              "fixable": "code",
              "messages": {
                "newLine": "Prop `{{prop}}` must be placed on a new line"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "maximum": {
                          "type": "object",
                          "properties": {
                            "single": {
                              "type": "integer",
                              "minimum": 1
                            },
                            "multi": {
                              "type": "integer",
                              "minimum": 1
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "maximum": {
                          "type": "number",
                          "minimum": 1
                        },
                        "when": {
                          "type": "string",
                          "enum": ["always", "multiline"]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "jsx-newline": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or prevent a new line after jsx elements and expressions.",
                "url": "https://eslint.style/rules/jsx/jsx-newline"
              },
              "fixable": "code",
              "messages": {
                "require": "JSX element should start in a new line",
                "prevent": "JSX element should not start in a new line",
                "allowMultilines": "Multiline JSX elements should start in a new line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "prevent": {
                      "default": false,
                      "type": "boolean"
                    },
                    "allowMultilines": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false,
                  "if": {
                    "properties": {
                      "allowMultilines": {
                        "const": true
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "prevent": {
                        "const": true
                      }
                    },
                    "required": ["prevent"]
                  }
                }
              ]
            }
          },
          "jsx-one-expression-per-line": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require one JSX element per line",
                "url": "https://eslint.style/rules/jsx/jsx-one-expression-per-line"
              },
              "fixable": "whitespace",
              "messages": {
                "moveToNewLine": "`{{descriptor}}` must be placed on a new line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allow": {
                      "type": "string",
                      "enum": ["none", "literal", "single-child"]
                    }
                  },
                  "default": {
                    "allow": "none"
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-props-no-multi-spaces": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow multiple spaces between inline JSX props",
                "url": "https://eslint.style/rules/jsx/jsx-props-no-multi-spaces"
              },
              "fixable": "code",
              "messages": {
                "noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
                "onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”"
              },
              "schema": []
            }
          },
          "jsx-self-closing-comp": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow extra closing tags for components without children",
                "url": "https://eslint.style/rules/jsx/jsx-self-closing-comp"
              },
              "fixable": "code",
              "messages": {
                "notSelfClosing": "Empty components are self-closing"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "component": {
                      "default": true,
                      "type": "boolean"
                    },
                    "html": {
                      "default": true,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-sort-props": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce props alphabetical sorting",
                "recommended": "stylistic",
                "url": "https://eslint.style/rules/jsx/jsx-sort-props"
              },
              "fixable": "code",
              "messages": {
                "noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
                "listIsEmpty": "A customized reserved first list must not be empty",
                "listReservedPropsFirst": "Reserved props must be listed before all other props",
                "listCallbacksLast": "Callbacks must be listed after all other props",
                "listShorthandFirst": "Shorthand props must be listed before all other props",
                "listShorthandLast": "Shorthand props must be listed after all other props",
                "listMultilineFirst": "Multiline props must be listed before all other props",
                "listMultilineLast": "Multiline props must be listed after all other props",
                "sortPropsByAlpha": "Props should be sorted alphabetically"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "callbacksLast": {
                      "type": "boolean"
                    },
                    "shorthandFirst": {
                      "type": "boolean"
                    },
                    "shorthandLast": {
                      "type": "boolean"
                    },
                    "multiline": {
                      "type": "string",
                      "enum": ["ignore", "first", "last"],
                      "default": "ignore"
                    },
                    "ignoreCase": {
                      "type": "boolean"
                    },
                    "noSortAlphabetically": {
                      "type": "boolean"
                    },
                    "reservedFirst": {
                      "type": ["array", "boolean"]
                    },
                    "locale": {
                      "type": "string",
                      "default": "auto"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-tag-spacing": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce whitespace in and around the JSX opening and closing brackets",
                "url": "https://eslint.style/rules/jsx/jsx-tag-spacing"
              },
              "fixable": "whitespace",
              "messages": {
                "selfCloseSlashNoSpace": "Whitespace is forbidden between `/` and `>`; write `/>`",
                "selfCloseSlashNeedSpace": "Whitespace is required between `/` and `>`; write `/ >`",
                "closeSlashNoSpace": "Whitespace is forbidden between `<` and `/`; write `</`",
                "closeSlashNeedSpace": "Whitespace is required between `<` and `/`; write `< /`",
                "beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeSelfCloseNeedSpace": "A space is required before closing bracket",
                "beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
                "afterOpenNoSpace": "A space is forbidden after opening bracket",
                "afterOpenNeedSpace": "A space is required after opening bracket",
                "beforeCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeCloseNeedSpace": "Whitespace is required before closing bracket",
                "beforeCloseNeedNewline": "A newline is required before closing bracket"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "closingSlash": {
                      "type": "string",
                      "enum": ["always", "never", "allow"]
                    },
                    "beforeSelfClosing": {
                      "type": "string",
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow"
                      ]
                    },
                    "afterOpening": {
                      "type": "string",
                      "enum": ["always", "allow-multiline", "never", "allow"]
                    },
                    "beforeClosing": {
                      "type": "string",
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow"
                      ]
                    }
                  },
                  "default": {
                    "closingSlash": "never",
                    "beforeSelfClosing": "always",
                    "afterOpening": "never",
                    "beforeClosing": "allow"
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-wrap-multilines": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow missing parentheses around multiline JSX",
                "url": "https://eslint.style/rules/jsx/jsx-wrap-multilines"
              },
              "fixable": "code",
              "messages": {
                "missingParens": "Missing parentheses around multilines JSX",
                "parensOnNewLines": "Parentheses around JSX should be on separate lines"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "declaration": {
                      "type": ["string", "boolean"],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "assignment": {
                      "type": ["string", "boolean"],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "return": {
                      "type": ["string", "boolean"],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "arrow": {
                      "type": ["string", "boolean"],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "condition": {
                      "type": ["string", "boolean"],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "logical": {
                      "type": ["string", "boolean"],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "prop": {
                      "type": ["string", "boolean"],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "member-delimiter-style": {
            "defaultOptions": [
              {
                "multiline": {
                  "delimiter": "semi",
                  "requireLast": true
                },
                "singleline": {
                  "delimiter": "semi",
                  "requireLast": false
                },
                "multilineDetection": "brackets"
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require a specific member delimiter style for interfaces and type literals",
                "url": "https://eslint.style/rules/ts/member-delimiter-style"
              },
              "fixable": "whitespace",
              "messages": {
                "unexpectedComma": "Unexpected separator (,).",
                "unexpectedSemi": "Unexpected separator (;).",
                "expectedComma": "Expected a comma.",
                "expectedSemi": "Expected a semicolon."
              },
              "schema": [
                {
                  "$defs": {
                    "multiLineOption": {
                      "type": "string",
                      "enum": ["none", "semi", "comma"]
                    },
                    "singleLineOption": {
                      "type": "string",
                      "enum": ["semi", "comma"]
                    },
                    "delimiterConfig": {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "object",
                          "properties": {
                            "delimiter": {
                              "$ref": "#/items/0/$defs/multiLineOption"
                            },
                            "requireLast": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "singleline": {
                          "type": "object",
                          "properties": {
                            "delimiter": {
                              "$ref": "#/items/0/$defs/singleLineOption"
                            },
                            "requireLast": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "properties": {
                    "multiline": {
                      "type": "object",
                      "properties": {
                        "delimiter": {
                          "$ref": "#/items/0/$defs/multiLineOption"
                        },
                        "requireLast": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "singleline": {
                      "type": "object",
                      "properties": {
                        "delimiter": {
                          "$ref": "#/items/0/$defs/singleLineOption"
                        },
                        "requireLast": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "interface": {
                          "$ref": "#/items/0/$defs/delimiterConfig"
                        },
                        "typeLiteral": {
                          "$ref": "#/items/0/$defs/delimiterConfig"
                        }
                      },
                      "additionalProperties": false
                    },
                    "multilineDetection": {
                      "type": "string",
                      "enum": ["brackets", "last-member"]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "type-annotation-spacing": {
            "defaultOptions": [{}],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require consistent spacing around type annotations",
                "url": "https://eslint.style/rules/ts/type-annotation-spacing"
              },
              "fixable": "whitespace",
              "messages": {
                "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
                "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
                "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
                "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
                "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'."
              },
              "schema": [
                {
                  "$defs": {
                    "spacingConfig": {
                      "type": "object",
                      "properties": {
                        "before": {
                          "type": "boolean"
                        },
                        "after": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    },
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "colon": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "arrow": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "variable": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "parameter": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "property": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "returnType": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "indent-binary-ops": {
            "defaultOptions": [2],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Indentation for binary operators",
                "recommended": "stylistic",
                "url": "https://eslint.style/rules/ts/indent-binary-ops"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "integer",
                      "minimum": 0
                    },
                    {
                      "type": "string",
                      "enum": ["tab"]
                    }
                  ]
                }
              ],
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}}"
              }
            }
          },
          "type-generic-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforces consistent spacing inside TypeScript type generics",
                "recommended": "stylistic",
                "url": "https://eslint.style/rules/ts/type-generic-spacing"
              },
              "fixable": "whitespace",
              "schema": [],
              "messages": {
                "genericSpacingMismatch": "Generic spaces mismatch"
              }
            }
          },
          "type-named-tuple-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Expect space before the type declaration in the named tuple",
                "recommended": "stylistic",
                "url": "https://eslint.style/rules/ts/type-named-tuple-spacing"
              },
              "fixable": "whitespace",
              "schema": [],
              "messages": {
                "expectedSpaceAfter": "Expected a space after the ':'.",
                "unexpectedSpaceBetween": "Unexpected space between '?' and the ':'.",
                "unexpectedSpaceBefore": "Unexpected space before the ':'."
              }
            }
          }
        }
      },
      "import": {
        "rules": {
          "no-unresolved": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imports point to a file/module that can be resolved.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-unresolved.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "commonjs": {
                      "type": "boolean"
                    },
                    "amd": {
                      "type": "boolean"
                    },
                    "esmodule": {
                      "type": "boolean"
                    },
                    "ignore": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    },
                    "caseSensitive": {
                      "type": "boolean",
                      "default": true
                    },
                    "caseSensitiveStrict": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "named": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Static analysis",
                "description": "Ensure named imports correspond to a named export in the remote file.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/named.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "commonjs": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "default": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Static analysis",
                "description": "Ensure a default export is present, given a default import.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/default.md"
              },
              "schema": []
            }
          },
          "namespace": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/namespace.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowComputed": {
                      "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-namespace": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Forbid namespace (a.k.a. \"wildcard\" `*`) imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-namespace.md"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignore": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    }
                  }
                }
              ]
            }
          },
          "export": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/export.md"
              },
              "schema": []
            }
          },
          "no-mutable-exports": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of mutable exports with `var` or `let`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-mutable-exports.md"
              },
              "schema": []
            }
          },
          "extensions": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Ensure consistent use of file extension within the import path.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/extensions.md"
              },
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": ["always", "ignorePackages", "never"]
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": ["always", "ignorePackages", "never"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "pattern": {
                            "type": "object",
                            "patternProperties": {
                              ".*": {
                                "enum": ["always", "ignorePackages", "never"]
                              }
                            }
                          },
                          "ignorePackages": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "object",
                        "properties": {
                          "pattern": {
                            "type": "object",
                            "patternProperties": {
                              ".*": {
                                "enum": ["always", "ignorePackages", "never"]
                              }
                            }
                          },
                          "ignorePackages": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "object",
                        "patternProperties": {
                          ".*": {
                            "enum": ["always", "ignorePackages", "never"]
                          }
                        }
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": ["always", "ignorePackages", "never"]
                      },
                      {
                        "type": "object",
                        "patternProperties": {
                          ".*": {
                            "enum": ["always", "ignorePackages", "never"]
                          }
                        }
                      }
                    ],
                    "additionalItems": false
                  }
                ]
              }
            }
          },
          "no-restricted-paths": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Static analysis",
                "description": "Enforce which files can be imported in a given folder.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-restricted-paths.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "zones": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "target": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "uniqueItems": true,
                                "minLength": 1
                              }
                            ]
                          },
                          "from": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "uniqueItems": true,
                                "minLength": 1
                              }
                            ]
                          },
                          "except": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "uniqueItems": true
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "basePath": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-internal-modules": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing the submodules of other modules.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-internal-modules.md"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "allow": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "forbid": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "group-exports": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Prefer named exports to be grouped together in a single export declaration",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/group-exports.md"
              }
            }
          },
          "no-relative-packages": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing packages through relative paths.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-relative-packages.md"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "commonjs": {
                      "type": "boolean"
                    },
                    "amd": {
                      "type": "boolean"
                    },
                    "esmodule": {
                      "type": "boolean"
                    },
                    "ignore": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-relative-parent-imports": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing modules from parent directories.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-relative-parent-imports.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "commonjs": {
                      "type": "boolean"
                    },
                    "amd": {
                      "type": "boolean"
                    },
                    "esmodule": {
                      "type": "boolean"
                    },
                    "ignore": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "consistent-type-specifier-style": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Enforce or ban the use of inline type-only markers for named imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/consistent-type-specifier-style.md"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": ["prefer-inline", "prefer-top-level"],
                  "default": "prefer-inline"
                }
              ]
            }
          },
          "no-self-import": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing itself.",
                "recommended": true,
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-self-import.md"
              },
              "schema": []
            }
          },
          "no-cycle": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing a module with a dependency path back to itself.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-cycle.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "commonjs": {
                      "type": "boolean"
                    },
                    "amd": {
                      "type": "boolean"
                    },
                    "esmodule": {
                      "type": "boolean"
                    },
                    "ignore": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    },
                    "maxDepth": {
                      "anyOf": [
                        {
                          "description": "maximum dependency depth to traverse",
                          "type": "integer",
                          "minimum": 1
                        },
                        {
                          "enum": ["∞"],
                          "type": "string"
                        }
                      ]
                    },
                    "ignoreExternal": {
                      "description": "ignore external modules",
                      "type": "boolean",
                      "default": false
                    },
                    "allowUnsafeDynamicCyclicDependency": {
                      "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-named-default": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Forbid named default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-default.md"
              },
              "schema": []
            }
          },
          "no-named-as-default": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as identifier of default export.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default.md"
              },
              "schema": []
            }
          },
          "no-named-as-default-member": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as property of default export.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default-member.md"
              },
              "schema": []
            }
          },
          "no-anonymous-default-export": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Forbid anonymous values as default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-anonymous-default-export.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowArray": {
                      "description": "If `false`, will report default export of an array",
                      "type": "boolean"
                    },
                    "allowArrowFunction": {
                      "description": "If `false`, will report default export of an arrow function",
                      "type": "boolean"
                    },
                    "allowCallExpression": {
                      "description": "If `false`, will report default export of a function call",
                      "type": "boolean"
                    },
                    "allowAnonymousClass": {
                      "description": "If `false`, will report default export of an anonymous class",
                      "type": "boolean"
                    },
                    "allowAnonymousFunction": {
                      "description": "If `false`, will report default export of an anonymous function",
                      "type": "boolean"
                    },
                    "allowLiteral": {
                      "description": "If `false`, will report default export of a literal",
                      "type": "boolean"
                    },
                    "allowObject": {
                      "description": "If `false`, will report default export of an object expression",
                      "type": "boolean"
                    },
                    "allowNew": {
                      "description": "If `false`, will report default export of a class instantiation",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-unused-modules": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid modules without exports, or exports without matching import in another module.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-unused-modules.md"
              },
              "schema": [
                {
                  "properties": {
                    "src": {
                      "description": "files/paths to be analyzed (only for unused exports)",
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "ignoreExports": {
                      "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "missingExports": {
                      "description": "report modules without any exports",
                      "type": "boolean"
                    },
                    "unusedExports": {
                      "description": "report exports without any usage",
                      "type": "boolean"
                    }
                  },
                  "anyOf": [
                    {
                      "properties": {
                        "unusedExports": {
                          "enum": [true]
                        },
                        "src": {
                          "minItems": 1
                        }
                      },
                      "required": ["unusedExports"]
                    },
                    {
                      "properties": {
                        "missingExports": {
                          "enum": [true]
                        }
                      },
                      "required": ["missingExports"]
                    }
                  ]
                }
              ]
            }
          },
          "no-commonjs": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Module systems",
                "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-commonjs.md"
              },
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": ["allow-primitive-modules"]
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "object",
                        "properties": {
                          "allowPrimitiveModules": {
                            "type": "boolean"
                          },
                          "allowRequire": {
                            "type": "boolean"
                          },
                          "allowConditionalRequire": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "additionalItems": false
                  }
                ]
              }
            }
          },
          "no-amd": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Module systems",
                "description": "Forbid AMD `require` and `define` calls.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-amd.md"
              },
              "schema": []
            }
          },
          "no-duplicates": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Style guide",
                "description": "Forbid repeated import of the same module in multiple places.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-duplicates.md"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "considerQueryString": {
                      "type": "boolean"
                    },
                    "prefer-inline": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "first": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Ensure all imports appear before other statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/first.md"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": ["absolute-first", "disable-absolute-first"]
                }
              ]
            }
          },
          "max-dependencies": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Enforce the maximum number of dependencies a module can have.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/max-dependencies.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "number"
                    },
                    "ignoreTypeImports": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-extraneous-dependencies": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of extraneous packages.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-extraneous-dependencies.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "devDependencies": {
                      "type": ["boolean", "array"]
                    },
                    "optionalDependencies": {
                      "type": ["boolean", "array"]
                    },
                    "peerDependencies": {
                      "type": ["boolean", "array"]
                    },
                    "bundledDependencies": {
                      "type": ["boolean", "array"]
                    },
                    "packageDir": {
                      "type": ["string", "array"]
                    },
                    "includeInternal": {
                      "type": ["boolean"]
                    },
                    "includeTypes": {
                      "type": ["boolean"]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-absolute-path": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Static analysis",
                "description": "Forbid import of modules using absolute paths.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-absolute-path.md"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "commonjs": {
                      "type": "boolean"
                    },
                    "amd": {
                      "type": "boolean"
                    },
                    "esmodule": {
                      "type": "boolean"
                    },
                    "ignore": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-nodejs-modules": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Module systems",
                "description": "Forbid Node.js builtin modules.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-nodejs-modules.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allow": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-webpack-loader-syntax": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Static analysis",
                "description": "Forbid webpack loader syntax in imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-webpack-loader-syntax.md"
              },
              "schema": []
            }
          },
          "order": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Enforce a convention in module import order.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/order.md"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array"
                    },
                    "pathGroupsExcludedImportTypes": {
                      "type": "array"
                    },
                    "distinctGroup": {
                      "type": "boolean",
                      "default": true
                    },
                    "pathGroups": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "pattern": {
                            "type": "string"
                          },
                          "patternOptions": {
                            "type": "object"
                          },
                          "group": {
                            "type": "string",
                            "enum": [
                              "builtin",
                              "external",
                              "internal",
                              "unknown",
                              "parent",
                              "sibling",
                              "index",
                              "object",
                              "type"
                            ]
                          },
                          "position": {
                            "type": "string",
                            "enum": ["after", "before"]
                          }
                        },
                        "additionalProperties": false,
                        "required": ["pattern", "group"]
                      }
                    },
                    "newlines-between": {
                      "enum": [
                        "ignore",
                        "always",
                        "always-and-inside-groups",
                        "never"
                      ]
                    },
                    "alphabetize": {
                      "type": "object",
                      "properties": {
                        "caseInsensitive": {
                          "type": "boolean",
                          "default": false
                        },
                        "order": {
                          "enum": ["ignore", "asc", "desc"],
                          "default": "ignore"
                        },
                        "orderImportKind": {
                          "enum": ["ignore", "asc", "desc"],
                          "default": "ignore"
                        }
                      },
                      "additionalProperties": false
                    },
                    "warnOnUnassignedImports": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "newline-after-import": {
            "meta": {
              "type": "layout",
              "docs": {
                "category": "Style guide",
                "description": "Enforce a newline after import statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/newline-after-import.md"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "minimum": 1
                    },
                    "exactCount": {
                      "type": "boolean"
                    },
                    "considerComments": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "prefer-default-export": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Prefer a default export if module exports a single name or multiple names.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/prefer-default-export.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "target": {
                      "type": "string",
                      "enum": ["single", "any"],
                      "default": "single"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-default-export": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Forbid default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-default-export.md"
              },
              "schema": []
            }
          },
          "no-named-export": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Forbid named exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-export.md"
              },
              "schema": []
            }
          },
          "no-dynamic-require": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Static analysis",
                "description": "Forbid `require()` calls with expressions.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-dynamic-require.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "esmodule": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "unambiguous": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Module systems",
                "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/unambiguous.md"
              },
              "schema": []
            }
          },
          "no-unassigned-import": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Forbid unassigned imports",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-unassigned-import.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "devDependencies": {
                      "type": ["boolean", "array"]
                    },
                    "optionalDependencies": {
                      "type": ["boolean", "array"]
                    },
                    "peerDependencies": {
                      "type": ["boolean", "array"]
                    },
                    "allow": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-useless-path-segments": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Static analysis",
                "description": "Forbid unnecessary path segments in import and require statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-useless-path-segments.md"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "commonjs": {
                      "type": "boolean"
                    },
                    "noUselessIndex": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "dynamic-import-chunkname": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/dynamic-import-chunkname.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "importFunctions": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "string"
                      }
                    },
                    "webpackChunknameFormat": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "no-import-module-exports": {
            "meta": {
              "type": "problem",
              "docs": {
                "category": "Module systems",
                "description": "Forbid import statements with CommonJS module.exports.",
                "recommended": true
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "array"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-empty-named-blocks": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid empty named import blocks.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-empty-named-blocks.md"
              },
              "fixable": "code",
              "schema": [],
              "hasSuggestions": true
            }
          },
          "exports-last": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Ensure all exports appear after other statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/exports-last.md"
              },
              "schema": []
            }
          },
          "no-deprecated": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-deprecated.md"
              },
              "schema": []
            }
          },
          "imports-first": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Style guide",
                "description": "Replaced by `import/first`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": ["absolute-first", "disable-absolute-first"]
                }
              ],
              "deprecated": true
            }
          }
        },
        "configs": {
          "recommended": {
            "plugins": ["import"],
            "rules": {
              "import/no-unresolved": "error",
              "import/named": "error",
              "import/namespace": "error",
              "import/default": "error",
              "import/export": "error",
              "import/no-named-as-default": "warn",
              "import/no-named-as-default-member": "warn",
              "import/no-duplicates": "warn"
            },
            "parserOptions": {
              "sourceType": "module",
              "ecmaVersion": 2018
            }
          },
          "errors": {
            "plugins": ["import"],
            "rules": {
              "import/no-unresolved": 2,
              "import/named": 2,
              "import/namespace": 2,
              "import/default": 2,
              "import/export": 2
            }
          },
          "warnings": {
            "plugins": ["import"],
            "rules": {
              "import/no-named-as-default": 1,
              "import/no-named-as-default-member": 1,
              "import/no-duplicates": 1
            }
          },
          "stage-0": {
            "plugins": ["import"],
            "rules": {
              "import/no-deprecated": 1
            }
          },
          "react": {
            "settings": {
              "import/extensions": [".js", ".jsx"]
            },
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true
              }
            }
          },
          "react-native": {
            "settings": {
              "import/resolver": {
                "node": {
                  "extensions": [".js", ".web.js", ".ios.js", ".android.js"]
                }
              }
            }
          },
          "electron": {
            "settings": {
              "import/core-modules": ["electron"]
            }
          },
          "typescript": {
            "settings": {
              "import/extensions": [
                ".ts",
                ".cts",
                ".mts",
                ".tsx",
                ".js",
                ".jsx"
              ],
              "import/external-module-folders": [
                "node_modules",
                "node_modules/@types"
              ],
              "import/parsers": {
                "@typescript-eslint/parser": [".ts", ".cts", ".mts", ".tsx"]
              },
              "import/resolver": {
                "node": {
                  "extensions": [".ts", ".cts", ".mts", ".tsx", ".js", ".jsx"]
                }
              }
            },
            "rules": {
              "import/named": "off"
            }
          }
        }
      }
    },
    "rules": {
      "accessor-pairs": "error",
      "array-callback-return": "error",
      "arrow-body-style": "error",
      "block-scoped-var": "error",
      "camelcase": "error",
      "capitalized-comments": "error",
      "class-methods-use-this": "error",
      "complexity": "error",
      "consistent-return": "error",
      "consistent-this": "error",
      "constructor-super": "error",
      "curly": "error",
      "default-case": "error",
      "default-case-last": "error",
      "default-param-last": "error",
      "dot-notation": "error",
      "eqeqeq": "error",
      "for-direction": "error",
      "func-name-matching": "error",
      "func-names": "error",
      "func-style": "off",
      "getter-return": "error",
      "grouped-accessor-pairs": "error",
      "guard-for-in": "error",
      "id-denylist": "error",
      "id-length": [
        "error",
        {
          "exceptions": ["a", "b"]
        }
      ],
      "id-match": "error",
      "init-declarations": "error",
      "line-comment-position": "error",
      "logical-assignment-operators": "error",
      "max-classes-per-file": "error",
      "max-depth": ["error", 5],
      "max-lines": "error",
      "max-lines-per-function": ["error", 120],
      "max-nested-callbacks": "error",
      "max-params": "error",
      "max-statements": "off",
      "multiline-comment-style": "error",
      "new-cap": "error",
      "no-alert": "error",
      "no-array-constructor": "error",
      "no-async-promise-executor": "error",
      "no-await-in-loop": "off",
      "no-bitwise": "error",
      "no-caller": "error",
      "no-case-declarations": "error",
      "no-class-assign": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": "error",
      "no-console": "off",
      "no-const-assign": "error",
      "no-constant-binary-expression": "error",
      "no-constant-condition": "error",
      "no-constructor-return": "error",
      "no-continue": "error",
      "no-control-regex": "error",
      "no-debugger": "error",
      "no-delete-var": "error",
      "no-div-regex": "error",
      "no-dupe-args": "error",
      "no-dupe-class-members": "error",
      "no-dupe-else-if": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-duplicate-imports": "error",
      "no-else-return": "error",
      "no-empty": "error",
      "no-empty-character-class": "error",
      "no-empty-function": "error",
      "no-empty-pattern": "error",
      "no-empty-static-block": "error",
      "no-eq-null": "error",
      "no-eval": "error",
      "no-ex-assign": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-extra-boolean-cast": "error",
      "no-extra-label": "error",
      "no-fallthrough": "error",
      "no-func-assign": "error",
      "no-global-assign": "error",
      "no-implicit-coercion": "error",
      "no-implicit-globals": "error",
      "no-implied-eval": "error",
      "no-import-assign": "error",
      "no-inline-comments": "error",
      "no-inner-declarations": "error",
      "no-invalid-regexp": "error",
      "no-invalid-this": "error",
      "no-irregular-whitespace": "error",
      "no-iterator": "error",
      "no-label-var": "error",
      "no-labels": "error",
      "no-lone-blocks": "error",
      "no-lonely-if": "error",
      "no-loop-func": "error",
      "no-loss-of-precision": "error",
      "no-magic-numbers": "off",
      "no-misleading-character-class": "error",
      "no-multi-assign": "error",
      "no-multi-str": "error",
      "no-negated-condition": "error",
      "no-nested-ternary": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-native-nonconstructor": "error",
      "no-new-symbol": "error",
      "no-new-wrappers": "error",
      "no-nonoctal-decimal-escape": "error",
      "no-obj-calls": "error",
      "no-object-constructor": "error",
      "no-octal": "error",
      "no-octal-escape": "error",
      "no-param-reassign": "error",
      "no-plusplus": "error",
      "no-promise-executor-return": "error",
      "no-proto": "error",
      "no-prototype-builtins": "error",
      "no-redeclare": "error",
      "no-regex-spaces": "error",
      "no-restricted-exports": "error",
      "no-restricted-globals": "error",
      "no-restricted-imports": "error",
      "no-restricted-properties": "error",
      "no-restricted-syntax": "error",
      "no-return-assign": "error",
      "no-script-url": "error",
      "no-self-assign": "error",
      "no-self-compare": "error",
      "no-sequences": "error",
      "no-setter-return": "error",
      "no-shadow": "error",
      "no-shadow-restricted-names": "error",
      "no-sparse-arrays": "error",
      "no-template-curly-in-string": "error",
      "no-ternary": "off",
      "no-this-before-super": "error",
      "no-throw-literal": "error",
      "no-undef": "error",
      "no-undef-init": "error",
      "no-undefined": "error",
      "no-underscore-dangle": "error",
      "no-unexpected-multiline": "error",
      "no-unmodified-loop-condition": "error",
      "no-unneeded-ternary": "error",
      "no-unreachable": "error",
      "no-unreachable-loop": "error",
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unsafe-optional-chaining": "error",
      "no-unused-expressions": "error",
      "no-unused-labels": "error",
      "no-unused-private-class-members": "error",
      "no-unused-vars": "error",
      "no-use-before-define": "error",
      "no-useless-backreference": "error",
      "no-useless-call": "error",
      "no-useless-catch": "error",
      "no-useless-computed-key": "error",
      "no-useless-concat": "error",
      "no-useless-constructor": "error",
      "no-useless-escape": "error",
      "no-useless-rename": "error",
      "no-useless-return": "error",
      "no-var": "error",
      "no-void": "error",
      "no-warning-comments": "error",
      "no-with": "error",
      "object-shorthand": "error",
      "one-var": "off",
      "operator-assignment": "error",
      "prefer-arrow-callback": "error",
      "prefer-const": "error",
      "prefer-destructuring": "off",
      "prefer-exponentiation-operator": "error",
      "prefer-named-capture-group": "off",
      "prefer-numeric-literals": "error",
      "prefer-object-has-own": "error",
      "prefer-object-spread": "error",
      "prefer-promise-reject-errors": "error",
      "prefer-regex-literals": "error",
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "radix": "error",
      "require-atomic-updates": "off",
      "require-await": "error",
      "require-unicode-regexp": "error",
      "require-yield": "error",
      "sort-imports": "error",
      "sort-keys": "off",
      "sort-vars": "error",
      "strict": "error",
      "symbol-description": "error",
      "unicode-bom": "error",
      "use-isnan": "error",
      "valid-typeof": "error",
      "vars-on-top": "error",
      "yoda": "error",
      "import/no-unresolved": "error",
      "import/named": "error",
      "import/namespace": "off",
      "import/default": "error",
      "import/export": "error",
      "import/no-named-as-default": "warn",
      "import/no-named-as-default-member": "warn",
      "import/no-duplicates": "warn",
      "@stylistic/array-bracket-newline": 2,
      "@stylistic/array-bracket-spacing": 2,
      "@stylistic/array-element-newline": ["error", "consistent"],
      "@stylistic/arrow-parens": 2,
      "@stylistic/arrow-spacing": 2,
      "@stylistic/block-spacing": 2,
      "@stylistic/brace-style": 2,
      "@stylistic/comma-dangle": 2,
      "@stylistic/comma-spacing": 2,
      "@stylistic/comma-style": 2,
      "@stylistic/computed-property-spacing": 2,
      "@stylistic/dot-location": ["error", "property"],
      "@stylistic/eol-last": 2,
      "@stylistic/function-call-argument-newline": ["error", "consistent"],
      "@stylistic/function-call-spacing": 2,
      "@stylistic/function-paren-newline": 2,
      "@stylistic/generator-star-spacing": 2,
      "@stylistic/implicit-arrow-linebreak": "off",
      "@stylistic/indent": ["error", 2],
      "@stylistic/key-spacing": 2,
      "@stylistic/keyword-spacing": 2,
      "@stylistic/linebreak-style": 2,
      "@stylistic/lines-around-comment": 2,
      "@stylistic/lines-between-class-members": 2,
      "@stylistic/multiline-ternary": 2,
      "@stylistic/new-parens": 2,
      "@stylistic/newline-per-chained-call": 2,
      "@stylistic/no-confusing-arrow": 2,
      "@stylistic/no-extra-parens": 2,
      "@stylistic/no-extra-semi": 2,
      "@stylistic/no-floating-decimal": 2,
      "@stylistic/no-multi-spaces": 2,
      "@stylistic/no-multiple-empty-lines": 2,
      "@stylistic/no-trailing-spaces": 2,
      "@stylistic/no-whitespace-before-property": 2,
      "@stylistic/nonblock-statement-body-position": 2,
      "@stylistic/object-curly-newline": 2,
      "@stylistic/object-curly-spacing": 2,
      "@stylistic/object-property-newline": "off",
      "@stylistic/one-var-declaration-per-line": 2,
      "@stylistic/operator-linebreak": 2,
      "@stylistic/padded-blocks": ["error", "never"],
      "@stylistic/padding-line-between-statements": 2,
      "@stylistic/quote-props": 2,
      "@stylistic/quotes": 2,
      "@stylistic/rest-spread-spacing": 2,
      "@stylistic/semi": 2,
      "@stylistic/semi-spacing": 2,
      "@stylistic/semi-style": 2,
      "@stylistic/space-before-blocks": 2,
      "@stylistic/space-before-function-paren": 2,
      "@stylistic/space-in-parens": 2,
      "@stylistic/space-infix-ops": 2,
      "@stylistic/space-unary-ops": 2,
      "@stylistic/spaced-comment": 2,
      "@stylistic/switch-colon-spacing": 2,
      "@stylistic/template-curly-spacing": 2,
      "@stylistic/template-tag-spacing": 2,
      "@stylistic/wrap-iife": 2,
      "@stylistic/wrap-regex": 2,
      "@stylistic/yield-star-spacing": 2,
      "@stylistic/member-delimiter-style": 2,
      "@stylistic/type-annotation-spacing": 2,
      "@stylistic/indent-binary-ops": 2,
      "@stylistic/type-generic-spacing": 2,
      "@stylistic/type-named-tuple-spacing": 2
    }
  }
]
